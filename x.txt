<!-- Reference: Actual Changes Made to Calorie Module Files (2025-06-21) -->

1. ai/master.js
- Standardized the API response to always return the main module data under a `data` property:
  { "message": "Success", "data": { ... }, ... }
- Removed any module-specific response key from the top-level response.

2. ai/calorie/calorie.js
- No changes needed for the new response structure (already exports only config and prompt generator).

3. ai/calorie/calorieiq.html
- Set the API endpoint to the master worker: https://master.4hm7q4q75z.workers.dev/
- POST payload: { module: "calorie", formData: ..., fingerprint: ... }
- On response, save the full response object to localStorage as calorieIqResponse.

4. ai/calorie/calorieoutput.html
- Retrieve the response from localStorage using the key calorieIqResponse.
- If the response has a `.data` property, use it for display:
  if (data && data.message === 'Success' && data.data) { data = data.data; }
- Enhanced UI expects main data fields (bmi, individualFoods, etc.) at the root of the object.
- Updated logic to use the extracted data directly for display, not looking for calorieAnalysis unless in legacy format.

5. utility/formPersistence.js
- Ensured that the response is only saved under the key calorieIqResponse for the calorie module, matching what the output page expects.
- Removed saving under any extra keys (like calorieIqData).

---

Operation: ratepay
Update rateLimitStatus in localStorage immediately after payment confirmation

Files to modify:
- /payment/redirectUrl.html

Implementation:
1. After successful payment linking call to stripeintegration worker
2. Add rate limit status refresh function
3. Call rate limiter with task: 'checkPaymentAndLimits'
4. Update rateLimitStatus in localStorage immediately  
5. Show updated usage/limits to user

Flow:
Payment completes → redirectUrl.html loads → call stripeintegration worker to link payment ✓ (exists) → NEW: call rate limiter to get fresh status → NEW: update localStorage rateLimitStatus → NEW: display success message with new limits → user sees "unlimited" or updated usage immediately

Benefits:
- Instant UI feedback after payment
- Uses existing backend infrastructure  
- No new endpoints needed
- Seamless user experience

---

Use this as a concrete example of the changes to make for each module when migrating to the master worker architecture.

/ To update other modules for the master worker pattern, make these changes:
//
// 1. Only export config and the full generatePrompt function (do not export response helpers or CORS logic).
// 2. Use this scaffolding (from calorie.js and enneagram.js):
//
// export const MODEL = "grok-3-mini-beta";
// export const MAX_TOKENS = 4000;
// export const RESPONSE_KEY = "<module>IqResponse";
// export const XAI_API_ENDPOINT = "https://api.x.ai/v1/chat/completions";
//
// export function generatePrompt(formData) {
//   // ...full prompt logic here, do not truncate...
//   return {
//     systemPrompt: promptWithData,
//     userMessage: "..."
//   };
// }
//
// 3. Do not include any processAIResponse or response helpers in the module file.
// 4. The prompt logic should be as detailed as needed for the module, just like in calorie.js and enneagram.js.
//
// To update a module's frontend to use the master worker, always do ALL of the following:
//
// 1. Change the API endpoint to the master worker:
//    const apiUrl = 'https://master.4hm7q4q75z.workers.dev/';
//
// 2. Add the module name to the payload:
//    const workerPayload = {
//      module: '<module>',
//      formData: formData,
//      fingerprint: fingerprintData
//    };
//
// 3. POST the payload as JSON to the master worker endpoint.
//
// 4. Save the response as <module>IqResponse in localStorage (handled by formPersistence.js or similar).
//
// 5. The output page should extract .data from the response if present, and display the main data fields at the root.
//
// 6. The module file (e.g., event.js) should only export config and the full generatePrompt function, with no response helpers.
//
// 7. Do not skip any of these steps for any module.
//
// This is the complete checklist for migrating any module to the master worker pattern. When you say "do what's in x.txt", ALL of these steps will be applied.

COMPLETED FASHION MODULE MIGRATION:
- ai/fashion/fashion.js: Completely recreated to export only config and generatePrompt, matching the master worker minimal module pattern. Removed all response helpers, CORS, validation, and extra logic - now only contains the full prompt generator.
- ai/fashion/fashioniq.html: Updated to use the master worker endpoint (https://master.4hm7q4q75z.workers.dev/) and send correct payload { module: 'fashion', formData, fingerprint } for proper routing.
- ai/fashion/fashionoutput.html: Updated to extract .data from the response if present, and display the main fashion data fields at the root. Enhanced to handle both legacy and new response formats.
- ai/master.js: Added fashion module import, configuration, and special image processing logic for photo uploads. Fashion module now properly routes through the master worker with full image support.

SPECIAL NOTE FOR FASHION MODULE:
Fashion module is unique because it handles image uploads. The master worker has been enhanced with special image processing logic specifically for the fashion module (moduleName === 'fashion') to convert base64 image data into the proper format for the AI API.
