{
  "version": 3,
  "sources": ["../../../ai/fact-generator/fact-generator.js"],
  "sourceRoot": "/Users/dallasp/Documents/INEXASLI/INEXASLI/.wrangler/tmp/deploy-kgElPv",
  "sourcesContent": ["export default {\n    async fetch(request, env, ctx) {\n        const url = new URL(request.url);\n        \n        // CORS headers for all responses\n        const corsHeaders = {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        };\n\n        // Handle CORS preflight\n        if (request.method === 'OPTIONS') {\n            return new Response(null, {\n                status: 204,\n                headers: corsHeaders\n            });\n        }\n\n        try {\n            if (url.pathname === '/generate-weekly-facts') {\n                return await generateWeeklyFacts(env, corsHeaders);\n            }\n\n            if (url.pathname === '/status') {\n                return new Response(JSON.stringify({\n                    status: 'active',\n                    lastGeneration: await env.FACT_STORE.get('last_generation_date'),\n                    modules: ['calorie', 'decision', 'enneagram', 'event', 'fashion', 'income', 'philosophy', 'quiz']\n                }), {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...corsHeaders\n                    }\n                });\n            }\n\n            if (url.pathname === '/facts') {\n                const modules = ['calorie', 'decision', 'enneagram', 'event', 'fashion', 'income', 'philosophy', 'quiz'];\n                const moduleParam = url.searchParams.get('module');\n                if (moduleParam && modules.includes(moduleParam)) {\n                    // Return facts for a single module\n                    const data = await env.FACT_STORE.get(`facts_${moduleParam}`);\n                    console.log(`[DEBUG] Raw KV data for facts_${moduleParam}:`, data);\n                    const facts = data ? JSON.parse(data) : [];\n                    console.log(`[DEBUG] Parsed facts for ${moduleParam}:`, facts);\n                    return new Response(JSON.stringify({ facts }), {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            ...corsHeaders\n                        }\n                    });\n                } else {\n                    // Return all facts\n                    const facts = {};\n                    for (const module of modules) {\n                        const data = await env.FACT_STORE.get(`facts_${module}`);\n                        console.log(`[DEBUG] Raw KV data for facts_${module}:`, data);\n                        facts[module] = data ? JSON.parse(data) : [];\n                        console.log(`[DEBUG] Parsed facts for ${module}:`, facts[module]);\n                    }\n                    return new Response(JSON.stringify({ facts }), {\n                        headers: {\n                            'Content-Type': 'application/json',\n                            ...corsHeaders\n                        }\n                    });\n                }\n            }\n\n            return new Response('Fact Generator Worker - Use /generate-weekly-facts, /facts, or /status', {\n                status: 200,\n                headers: corsHeaders\n            });\n\n        } catch (error) {\n            console.error('Fact Generator Error:', error);\n            return new Response(JSON.stringify({\n                error: 'Internal server error',\n                message: error.message\n            }), {\n                status: 500,\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...corsHeaders\n                }\n            });\n        }\n    },\n\n    // Scheduled event for weekly generation (runs every Sunday at 2 AM UTC)\n    async scheduled(controller, env, ctx) {\n        console.log('Weekly fact generation triggered by cron');\n        await generateWeeklyFacts(env);\n    }\n};\n\n/**\n * Generate fresh facts for all modules using OpenAI\n */\nasync function generateWeeklyFacts(env, corsHeaders = {}) {\n    console.log('\uD83D\uDE80 Starting generateWeeklyFacts function...');\n    \n    const modules = [\n        { name: 'calorie', topic: 'nutrition, calories, metabolism, and healthy eating' },\n        { name: 'decision', topic: 'decision making, problem solving, and critical thinking' },\n        { name: 'enneagram', topic: 'personality types, self-awareness, and personal growth' },\n        { name: 'event', topic: 'event planning, scheduling, organization, and time management' },\n        { name: 'fashion', topic: 'fashion, style, clothing, and personal appearance' },\n        { name: 'income', topic: 'income, finance, budgeting, and money management' },\n        { name: 'philosophy', topic: 'philosophy, wisdom, meaning, and life purpose' },\n        { name: 'quiz', topic: 'learning, knowledge, trivia, and cognitive skills' }\n    ];\n\n    console.log(`\uD83D\uDCCB Processing ${modules.length} modules:`, modules.map(m => m.name).join(', '));\n\n    const allFacts = {};\n    let totalGenerated = 0;\n    const generationStart = Date.now();\n\n    try {\n        // Generate facts for each module\n        for (const module of modules) {\n            console.log(`\uD83D\uDD04 Generating facts for ${module.name}...`);\n            \n            try {\n                const prompt = `Generate exactly 7 educational facts about ${module.topic}. Each fact must be 8-12 words. Format: one fact per line, no numbering, no extra text.`;\n                console.log(`\uD83D\uDCE4 Prompt for ${module.name}: ${prompt}`);\n\n                // Get API key from secret binding service\n                console.log(`\uD83D\uDD11 Getting API key for ${module.name}...`);\n                const apiKey = await getApiKey(env);\n                if (!apiKey) {\n                    console.log(`\u274C No API key retrieved for ${module.name}`);\n                    throw new Error(`No API key available for ${module.name}`);\n                }\n                console.log(`\u2705 API key retrieved for ${module.name}`);\n            \n            console.log(`\uD83D\uDCE4 Sending API request for ${module.name}...`);\n            \n            const response = await fetch('https://api.x.ai/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    model: 'grok-3-mini-beta',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `## ROLE & TASK\nYou are an educational content specialist generating facts about ${module.topic}.\n\n## CORE REQUIREMENTS\n- Output ONLY valid JSON (complete structure within 500 tokens)\n- Generate exactly 7 educational facts\n- Each fact must be 8-12 words long\n- No explanations, reasoning, or extra text\n\n## PROCESSING RULES\n1. **Fact Generation**: Create educational facts based on verified information\n2. **Word Count**: Ensure each fact is exactly 8-12 words long\n3. **Clarity**: Use simple, clear language suitable for general audiences\n4. **Accuracy**: Base facts on established knowledge and research\n\n## OUTPUT SCHEMA\n{\n  \"facts\": [\n    \"Educational fact about the topic (8-12 words)\",\n    \"Another educational fact about the topic (8-12 words)\",\n    \"Third educational fact about the topic (8-12 words)\",\n    \"Fourth educational fact about the topic (8-12 words)\",\n    \"Fifth educational fact about the topic (8-12 words)\",\n    \"Sixth educational fact about the topic (8-12 words)\",\n    \"Seventh educational fact about the topic (8-12 words)\"\n  ]\n}\n\n## VALIDATION\n- Verify JSON structure is complete and valid\n- Ensure exactly 7 facts are provided\n- Confirm each fact meets word count requirements`\n                        },\n                        {\n                            role: 'user',\n                            content: `Generate educational facts about: ${module.topic}`\n                        }\n                    ],\n                    max_tokens: 4000,\n                    temperature: 0.7,\n                    response_format: { type: \"json_object\" }\n                })\n            });\n\n            console.log(`\uD83D\uDCE5 API response status for ${module.name}: ${response.status}`);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(`X.AI API error for ${module.name}: ${response.status} - ${errorText}`);\n                throw new Error(`X.AI API error: ${response.status} - ${errorText}`);\n            }\n\n            const data = await response.json();\n            console.log(`\uD83D\uDCE5 Raw API response for ${module.name}:`, JSON.stringify(data, null, 2));\n            \n            // Get content from either the regular content field or the reasoning_content field (same as calorie.js)\n            const factsText = data.choices?.[0]?.message?.content || data.choices?.[0]?.message?.reasoning_content;\n            console.log(`\uD83D\uDCE5 Facts text for ${module.name}:`, factsText);\n            \n            if (!factsText || factsText.length === 0) {\n                console.log(`\u274C Empty or missing content for ${module.name}`);\n                throw new Error(`Empty response from X.AI API for ${module.name}`);\n            }\n            \n            console.log(`Generated facts text for ${module.name}:`, factsText);\n            \n            // Parse JSON response to extract facts array\n            let facts;\n            try {\n                const factsData = JSON.parse(factsText);\n                facts = factsData.facts || [];\n                console.log(`Parsed facts from JSON for ${module.name}:`, facts);\n            } catch (parseError) {\n                console.error(`Failed to parse JSON for ${module.name}:`, parseError);\n                // Fallback: try to extract facts from text if JSON parsing fails\n                facts = factsText.split('\\n').filter(fact => fact.trim().length > 0);\n                console.log(`Fallback: parsed facts from text for ${module.name}:`, facts);\n            }\n\n            // Ensure we have exactly 7 facts\n            if (facts.length !== 7) {\n                console.warn(`Module ${module.name} generated ${facts.length} facts instead of 7. Facts:`, facts);\n                // Only pad if we got some valid facts but not enough\n                if (facts.length > 0 && facts.length < 7) {\n                    while (facts.length < 7) {\n                        // Use the last generated fact as a template instead of generic message\n                        const lastFact = facts[facts.length - 1];\n                        facts.push(lastFact);\n                    }\n                } else if (facts.length === 0) {\n                    // If no facts were generated, throw an error instead of using fallback\n                    throw new Error(`No facts generated for ${module.name}`);\n                }\n                facts.splice(7); // Keep only first 7\n            }\n\n            allFacts[module.name] = facts;\n            totalGenerated += facts.length;\n\n            // Store facts in KV store for each module worker\n            await env.FACT_STORE.put(`facts_${module.name}`, JSON.stringify(facts));\n            \n            // Small delay to avoid rate limiting\n            await new Promise(resolve => setTimeout(resolve, 100));\n            \n            } catch (moduleError) {\n                console.error(`Failed to generate facts for ${module.name}:`, moduleError);\n                // Use fallback facts for this module\n                const fallbackFacts = Array(7).fill(`${module.topic.split(',')[0]} fact coming soon`);\n                allFacts[module.name] = fallbackFacts;\n                totalGenerated += fallbackFacts.length;\n                \n                // Store fallback facts\n                await env.FACT_STORE.put(`facts_${module.name}`, JSON.stringify(fallbackFacts));\n            }\n        }\n\n        // Store generation metadata\n        const metadata = {\n            timestamp: new Date().toISOString(),\n            totalFacts: totalGenerated,\n            modules: modules.length,\n            generationTimeMs: Date.now() - generationStart,\n            weekNumber: getWeekNumber()\n        };\n\n        await env.FACT_STORE.put('last_generation_date', new Date().toISOString());\n        await env.FACT_STORE.put('generation_metadata', JSON.stringify(metadata));\n\n        console.log(`\u2705 Generated ${totalGenerated} facts for ${modules.length} modules in ${metadata.generationTimeMs}ms`);\n\n        // Notify all module workers of new facts\n        await notifyModuleWorkers(modules, env);\n\n        return new Response(JSON.stringify({\n            success: true,\n            message: `Generated ${totalGenerated} fresh facts for ${modules.length} modules`,\n            facts: allFacts,\n            metadata\n        }), {\n            headers: {\n                'Content-Type': 'application/json',\n                ...corsHeaders\n            }\n        });\n\n    } catch (error) {\n        console.error('Weekly fact generation failed:', error);\n        \n        return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            timestamp: new Date().toISOString()\n        }), {\n            status: 500,\n            headers: {\n                'Content-Type': 'application/json',\n                ...corsHeaders\n            }\n        });\n    }\n}\n\n/**\n * Notify module workers that new facts are available\n */\nasync function notifyModuleWorkers(modules, env) {\n    const notifications = modules.map(async (module) => {\n        try {\n            const response = await fetch(`https://${module.name}.workers.dev/refresh-facts`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${env.WORKER_SYNC_TOKEN || 'sync-token'}`\n                },\n                body: JSON.stringify({\n                    action: 'refresh',\n                    timestamp: new Date().toISOString()\n                })\n            });\n            \n            if (response.ok) {\n                console.log(`\u2705 Notified ${module.name} worker`);\n            } else {\n                console.warn(`\u26A0\uFE0F Failed to notify ${module.name} worker: ${response.status}`);\n            }\n        } catch (error) {\n            console.warn(`\u26A0\uFE0F Failed to notify ${module.name} worker:`, error.message);\n        }\n    });\n    \n    await Promise.allSettled(notifications);\n}\n\n/**\n * Get current week number for tracking\n */\nfunction getWeekNumber() {\n    const now = new Date();\n    const start = new Date(now.getFullYear(), 0, 1);\n    const diff = now - start;\n    const weekNumber = Math.ceil(diff / (7 * 24 * 60 * 60 * 1000));\n    return weekNumber;\n}\n\n/**\n * Get API key from secret binding service (same pattern as calorie worker)\n */\n// async function getApiKey(env) {\n//     console.log(\"Attempting to get API key from environment\");\n//     \n//     // First try to get from secret_binding\n//     try {\n//         if (env.secret_binding) {\n//             console.log(\"Secret binding exists, attempting to use it\");\n//             \n//             // Make request to the bound service\n//             const response = await env.secret_binding.fetch(new Request(\"https://placeholder\", {\n//                 method: \"POST\",\n//                 headers: {\n//                     \"Content-Type\": \"application/json\"\n//                 },\n//                 body: JSON.stringify({\n//                     secretName: \"XAI_API_KEY\"\n//                 })\n//             }));\n//             \n//             if (!response.ok) {\n//                 const errorText = await response.text();\n//                 console.error(\"Error from secret worker:\", errorText);\n//                 throw new Error(`Secret worker error: ${response.status}`);\n//             }\n//             \n//             // Parse the response to get the API key\n//             const data = await response.json();\n//             if (data && data.value) {\n//                 console.log(\"Successfully retrieved API key from secret_binding\");\n//                 return data.value;\n//             }\n//             \n//             throw new Error(\"Invalid response from secret_binding\");\n//         }\n//     } catch (bindingError) {\n//         console.error(\"Error with secret_binding:\", bindingError);\n//         // Continue to next method if this fails\n//     }\n//     \n//     // Fallback to environment variable (if somehow available)\n//     if (env.XAI_API_KEY) {\n//         console.log(\"Using fallback XAI_API_KEY from environment\");\n//         return env.XAI_API_KEY;\n//     }\n//     \n//     throw new Error(\"No API key available - neither secret_binding nor XAI_API_KEY found\");\n// }\n\n// --- New way: use environment variable only ---\nasync function getApiKey(env) {\n    if (env.XAI_API_KEY) {\n        console.log(\"Using XAI_API_KEY from environment\");\n        return env.XAI_API_KEY;\n    }\n    throw new Error(\"No API key available in environment\");\n}\n"],
  "mappings": "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",
  "names": []
}
